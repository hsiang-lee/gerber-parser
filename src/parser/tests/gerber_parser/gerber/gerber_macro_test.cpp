#include <gtest/gtest.h>
#include "aperture/gerber_macro.h"
#include "gerber/gerber_primitive.h"
#include "gerber_parser/parser/macro_parser/gerber_macro_parser.h"

TEST(GerberMacroTest, TestRender1)
{
    std::string data = "1,1,0.025400,0.085200,0.085200*\
    1,1,0.025400,-0.802300,0.085200*\
    20,1,0.025400,0.085200,0.085200,-0.802300,0.085200,0.0*\
    1,1,0.025400,-0.802300,0.085200*\
    1,1,0.025400,-0.802300,0.802300*\
    20,1,0.025400,-0.802300,0.085200,-0.802300,0.802300,0.0*\
    1,1,0.025400,-0.802300,0.802300*\
    1,1,0.025400,0.802300,0.802300*\
    20,1,0.025400,-0.802300,0.802300,0.802300,0.802300,0.0*\
    1,1,0.025400,0.802300,0.802300*\
    1,1,0.025400,0.802300,-0.802300*\
    20,1,0.025400,0.802300,0.802300,0.802300,-0.802300,0.0*\
    1,1,0.025400,0.802300,-0.802300*\
    1,1,0.025400,0.085200,-0.802300*\
    20,1,0.025400,0.802300,-0.802300,0.085200,-0.802300,0.0*\
    1,1,0.025400,0.085200,-0.802300*\
    1,1,0.025400,0.085200,0.085200*\
    20,1,0.025400,0.085200,-0.802300,0.085200,0.085200,0.0*\
    1,1,0.050800,0.789600,0.072500*\
    1,1,0.050800,0.097900,0.072500*\
    20,1,0.050800,0.789600,0.072500,0.097900,0.072500,0.0*\
    22,1,1.630000,0.406400,-0.815000,0.408600,0.0*\
    22,1,1.630000,0.406400,-0.815000,0.072500,0.0*\
    22,1,0.406400,0.887500,0.408600,-0.815000,0.0*\
    22,1,0.406400,0.887500,0.072500,-0.815000,0.0*";
    GerberMacroParser parser(data, "A32301113563-e-gbs", false);
    auto macro = parser.Parse();

    EXPECT_TRUE(bool(macro));
    EXPECT_EQ(macro->Name(), "A32301113563-e-gbs");

    auto cmds = macro->Render(std::vector<double>{});
    auto cmds0 = dynamic_cast<Single*>(cmds[0]);
    auto cmds24 = dynamic_cast<Single*>(cmds[24]);

    EXPECT_EQ(cmds.size(), 25);
    EXPECT_EQ(cmds0->type_, Primitive::cCircle);
    EXPECT_EQ(cmds0->start_, std::make_pair(0.085200000000000026, 0.085200000000000026));
    EXPECT_EQ(cmds24->type_, Primitive::cOutline);
    EXPECT_EQ(cmds24->start_, std::make_pair(0.0, 0.0));
}

TEST(GerberMacroTest, TestRender2)
{
    std::string data = "1,1,0.025400,0.000000,1.257300*\
    1,1,0.025400,0.000000,-1.257300*\
    20,1,0.025400,0.000000,1.257300,0.000000,-1.257300,0.0*\
    1,1,0.025400,1.257300,0.000000*\
    1,1,0.025400,-1.257300,0.000000*\
    20,1,0.025400,1.257300,0.000000,-1.257300,0.000000,0.0*\
    1,1,0.025400,-0.719842,0.797335*\
    1,1,0.025400,-0.719842,0.317930*\
    20,1,0.025400,-0.719842,0.797335,-0.719842,0.317930,0.0*\
    1,1,0.025400,-0.719842,0.317930*\
    1,1,0.025400,-0.400237,0.317930*\
    20,1,0.025400,-0.719842,0.317930,-0.400238,0.317930,0.0*\
    4,1,4,\
    -0.250000,-0.250000,\
    -0.250000,0.250000,\
    0.250000,0.250000,\
    0.250000,-0.250000,\
    -0.250000,-0.250000,\
    0.0000*\
    1,1,0.400000,0.000000,0.000000*";
    GerberMacroParser parser(data, "A1lth_1-3_scpt", false);
    auto macro = parser.Parse();

    EXPECT_TRUE(bool(macro));
    EXPECT_EQ(macro->Name(), "A1lth_1-3_scpt");

    auto cmds = macro->Render(std::vector<double>{});
    auto cmds0 = dynamic_cast<Single*>(cmds[0]);
    auto cmds13 = dynamic_cast<Single*>(cmds[13]);

    EXPECT_EQ(cmds.size(), 14);
    EXPECT_EQ(cmds0->type_, Primitive::cCircle);
    EXPECT_EQ(cmds0->start_, std::make_pair(0.0, 1.2572999999999999));
    EXPECT_EQ(cmds13->type_, Primitive::cCircle);
    EXPECT_EQ(cmds13->start_, std::make_pair(0.0, 0.0));
}

TEST(GerberMacroTest, TestRender3)
{
    std::string data = "1,1,0.009000,-0.019785,0.034578*\
    1,1,0.009000,-0.020370,0.043592*\
    20,1,0.009000,-0.019785,0.034578,-0.020370,0.043592,0.0*\
    1,1,0.009000,-0.020370,0.043592*\
    1,1,0.009000,0.008429,0.014793*\
    20,1,0.009000,-0.020370,0.043592,0.008429,0.014793,0.0*\
    1,1,0.009000,0.004215,0.010579*\
    1,1,0.009000,0.012644,0.019008*\
    20,1,0.009000,0.004215,0.010579,0.012644,0.019008,0.0*\
    1,1,0.009000,0.012035,0.066398*\
    1,1,0.009000,0.011449,0.075412*\
    20,1,0.009000,0.012035,0.066398,0.011449,0.075412,0.0*\
    1,1,0.009000,0.011449,0.075412*\
    1,1,0.009000,0.040249,0.046613*\
    20,1,0.009000,0.011449,0.075412,0.040249,0.046613,0.0*\
    1,1,0.009000,0.036034,0.042398*\
    1,1,0.009000,0.044463,0.050827*\
    20,1,0.009000,0.036034,0.042398,0.044463,0.050827,0.0*\
    1,1,0.009000,0.049240,0.084403*\
    1,1,0.009000,0.066098,0.101262*\
    20,1,0.009000,0.049240,0.084403,0.066098,0.101262,0.0*\
    1,1,0.009000,0.071460,0.125823*\
    1,1,0.009000,0.070875,0.134837*\
    20,1,0.009000,0.071460,0.125823,0.070875,0.134837,0.0*\
    1,1,0.009000,0.070875,0.134837*\
    1,1,0.009000,0.079304,0.143266*\
    20,1,0.009000,0.070875,0.134837,0.079304,0.143266,0.0*\
    1,1,0.009000,0.079304,0.143266*\
    1,1,0.009000,0.088318,0.142681*\
    20,1,0.009000,0.079304,0.143266,0.088318,0.142681,0.0*\
    1,1,0.009000,0.088318,0.142681*\
    1,1,0.009000,0.093118,0.137881*\
    20,1,0.009000,0.088318,0.142681,0.093118,0.137881,0.0*\
    1,1,0.009000,0.093118,0.137881*\
    1,1,0.009000,0.093703,0.128867*\
    20,1,0.009000,0.093118,0.137881,0.093703,0.128867,0.0*\
    1,1,0.009000,0.093703,0.128867*\
    1,1,0.009000,0.089489,0.124652*\
    20,1,0.009000,0.093703,0.128867,0.089489,0.124652,0.0*\
    1,1,0.009000,0.089489,0.124652*\
    1,1,0.009000,0.095459,0.101823*\
    20,1,0.009000,0.089489,0.124652,0.095459,0.101823,0.0*\
    1,1,0.009000,0.095459,0.101823*\
    1,1,0.009000,0.112318,0.118682*\
    20,1,0.009000,0.095459,0.101823,0.112318,0.118682,0.0*\
    1,1,0.009000,0.107494,0.161857*\
    1,1,0.009000,0.106909,0.170872*\
    20,1,0.009000,0.107494,0.161857,0.106909,0.170872,0.0*\
    1,1,0.009000,0.106909,0.170872*\
    1,1,0.009000,0.135708,0.142072*\
    20,1,0.009000,0.106909,0.170872,0.135708,0.142072,0.0*\
    1,1,0.009000,0.131494,0.137858*\
    1,1,0.009000,0.139923,0.146287*\
    20,1,0.009000,0.131494,0.137858,0.139923,0.146287,0.0*";
    GerberMacroParser parser(data, "A1top", false);
    auto macro = parser.Parse();

    EXPECT_TRUE(bool(macro));
    EXPECT_EQ(macro->Name(), "A1top");

    auto cmds = macro->Render(std::vector<double>{});
    auto cmds0 = dynamic_cast<Single*>(cmds[0]);
    auto cmds47 = dynamic_cast<Single*>(cmds[47]);

    EXPECT_EQ(cmds.size(), 54);
    EXPECT_EQ(cmds0->type_, Primitive::cCircle);
    EXPECT_EQ(cmds0->start_, std::make_pair(-0.019785000000000004, 0.034578000000000012));
    EXPECT_EQ(cmds47->type_, Primitive::cOutline);
    EXPECT_DOUBLE_EQ(cmds47->start_.first, 0);
    EXPECT_DOUBLE_EQ(cmds47->start_.second, 0);
}
